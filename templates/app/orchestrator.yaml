apiVersion: v1
kind: Template
metadata:
  name: orchestrator
objects:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: orchestrator
    labels:
      app: "${APP_NAME}"
  spec:
    strategy:
      type: Recreate
    replicas: 1
    selector:
      matchLabels:
        name: orchestrator
    template:
      metadata:
        name: orchestrator
        labels:
          name: orchestrator
      spec:
        containers:
        - name: orchestrator
          image: "${ORCHESTRATOR_IMAGE_NAMESPACE}/${ORCHESTRATOR_IMAGE_NAME}:${ORCHESTRATOR_IMAGE_TAG}"
          livenessProbe:
            exec:
              command:
              - pidof
              - MIQ Server
            initialDelaySeconds: 480
            timeoutSeconds: 3
          env:
          - name: ALLOW_INSECURE_SESSION
            value: 'true'
          - name: APP_NAME
            value: "${APP_NAME}"
          - name: APPLICATION_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: app-secrets
                key: admin-password
          - name: GUID
            value: "${GUID}"
          - name: DATABASE_REGION
            value: "${DATABASE_REGION}"
          - name: DATABASE_HOSTNAME
            valueFrom:
              secretKeyRef:
                name: postgresql-secrets
                key: hostname
          - name: DATABASE_NAME
            valueFrom:
              secretKeyRef:
                name: postgresql-secrets
                key: dbname
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: postgresql-secrets
                key: password
          - name: DATABASE_PORT
            valueFrom:
              secretKeyRef:
                name: postgresql-secrets
                key: port
          - name: DATABASE_USER
            valueFrom:
              secretKeyRef:
                name: postgresql-secrets
                key: username
          - name: ENCRYPTION_KEY
            valueFrom:
              secretKeyRef:
                name: app-secrets
                key: encryption-key
          - name: CONTAINER_IMAGE_NAMESPACE
            value: "${ORCHESTRATOR_IMAGE_NAMESPACE}"
          - name: IMAGE_PULL_SECRET
            value: "${IMAGE_PULL_SECRET}"
          - name: MESSAGING_HOSTNAME
            valueFrom:
              secretKeyRef:
                name: kafka-secrets
                key: hostname
          - name: MESSAGING_PASSWORD
            valueFrom:
              secretKeyRef:
                name: kafka-secrets
                key: password
          - name: MESSAGING_PORT
            value: "${MESSAGING_PORT}"
          - name: MESSAGING_TYPE
            value: "${MESSAGING_TYPE}"
          - name: MESSAGING_USERNAME
            valueFrom:
              secretKeyRef:
                name: kafka-secrets
                key: username
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_UID
            valueFrom:
              fieldRef:
                fieldPath: metadata.uid
          resources:
            requests:
              memory: "${ORCHESTRATOR_MEM_REQ}"
              cpu: "${ORCHESTRATOR_CPU_REQ}"
            limits:
              memory: "${ORCHESTRATOR_MEM_LIMIT}"
        imagePullSecrets:
        - name: "${IMAGE_PULL_SECRET}"
        serviceAccountName: "${APP_NAME}-orchestrator"
        terminationGracePeriodSeconds: 90
parameters:
- name: APP_NAME
  value: manageiq
- name: DATABASE_REGION
  value: '0'
- name: GUID
  from: "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"
  generate: expression
- name: IMAGE_PULL_SECRET
  value: ''
- name: ORCHESTRATOR_IMAGE_NAMESPACE
  value: manageiq
- name: ORCHESTRATOR_IMAGE_NAME
  value: manageiq-orchestrator
- name: ORCHESTRATOR_IMAGE_TAG
  value: latest
- name: ORCHESTRATOR_CPU_REQ
  value: 1000m
- name: ORCHESTRATOR_MEM_REQ
  value: 6144Mi
- name: ORCHESTRATOR_MEM_LIMIT
  value: 16384Mi
- name: MESSAGING_TYPE
  value: kafka
