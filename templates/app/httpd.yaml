apiVersion: v1
kind: Template
metadata:
  name: "${APP_NAME}-httpd"
objects:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: httpd-configs
    labels:
      app: "${APP_NAME}"
  data:
    application.conf: |
      Listen 8080
      # Timeout: The number of seconds before receives and sends time out.
      Timeout 120

      RewriteEngine On
      Options SymLinksIfOwnerMatch

      <VirtualHost *:8080>
        KeepAlive on
        # Without ServerName mod_auth_mellon compares against http:// and not https:// from the IdP
        ServerName https://%{REQUEST_HOST}

        ProxyPreserveHost on

        RewriteCond %{REQUEST_URI}     ^/ws/notifications [NC]
        RewriteCond %{HTTP:UPGRADE}    ^websocket$ [NC]
        RewriteCond %{HTTP:CONNECTION} ^Upgrade$   [NC]
        RewriteRule .* ws://ui:3000%{REQUEST_URI}  [P,QSA,L]
        ProxyPassReverse /ws/notifications ws://ui:3000/ws/notifications

        RewriteCond %{REQUEST_URI} !^/api

        # For httpd, some ErrorDocuments must by served by the httpd pod
        RewriteCond %{REQUEST_URI} !^/proxy_pages

        # For OpenID-Connect /openid-connect is only served by mod_auth_openidc
        RewriteCond %{REQUEST_URI} !^/openid-connect

        RewriteRule ^/ http://ui:3000%{REQUEST_URI} [P,QSA,L]
        ProxyPassReverse / http://ui:3000/

        ProxyPass /api http://web-service:3000/api
        ProxyPassReverse /api http://web-service:3000/api

        RewriteCond %{REQUEST_URI}     ^/ws/console [NC]
        RewriteCond %{HTTP:UPGRADE}    ^websocket$  [NC]
        RewriteCond %{HTTP:CONNECTION} ^Upgrade$    [NC]
        RewriteRule .* ws://remote-console:3000%{REQUEST_URI}  [P,QSA,L]
        ProxyPassReverse /ws/console ws://remote-console:3000/ws/console

        # Ensures httpd stdout/stderr are seen by 'docker logs'.
        ErrorLog  "| /usr/bin/tee /proc/1/fd/2 /var/log/httpd/error_log"
        CustomLog "| /usr/bin/tee /proc/1/fd/1 /var/log/httpd/access_log" common
      </VirtualHost>
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: "${APP_NAME}"
    name: ui
  spec:
    ports:
    - name: ui-3000
      port: 3000
    selector:
      service: ui
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: "${APP_NAME}"
    name: web-service
  spec:
    ports:
    - name: web-service-3000
      port: 3000
    selector:
      service: web-service
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: "${APP_NAME}"
    name: remote-console
  spec:
    ports:
    - name: remote-console-3000
      port: 3000
    selector:
      service: remote-console
- apiVersion: v1
  kind: Service
  metadata:
    name: httpd
    labels:
      app: "${APP_NAME}"
  spec:
    ports:
    - name: http
      port: 8080
    selector:
      name: httpd
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: httpd
    labels:
      app: "${APP_NAME}"
  spec:
    replicas: 1
    selector:
      matchLabels:
        name: httpd
    template:
      metadata:
        name: httpd
        labels:
          name: httpd
      spec:
        volumes:
        - name: httpd-config
          configMap:
            name: httpd-configs
        containers:
        - name: httpd
          image: "${HTTPD_IMAGE_NAME}:${HTTPD_IMAGE_TAG}"
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 10
            timeoutSeconds: 3
          volumeMounts:
          - name: httpd-config
            mountPath: "/etc/httpd/conf.d"
          resources:
            requests:
              memory: "${HTTPD_MEM_REQ}"
              cpu: "${HTTPD_CPU_REQ}"
            limits:
              memory: "${HTTPD_MEM_LIMIT}"
- apiVersion: extensions/v1beta1
  kind: Ingress
  metadata:
    name: httpd
    labels:
      app: "${APP_NAME}"
  spec:
    tls:
    - hosts:
      - "${APPLICATION_DOMAIN}"
      secretName: tls-secret
    rules:
    - host: "${APPLICATION_DOMAIN}"
      http:
        paths:
        - path: "/"
          backend:
            serviceName: httpd
            servicePort: 8080
parameters:
- name: APP_NAME
  value: manageiq
- name: APPLICATION_DOMAIN
  value: ''
- name: HTTPD_IMAGE_NAME
  value: manageiq/httpd
- name: HTTPD_IMAGE_TAG
  value: latest
- name: HTTPD_CPU_REQ
  value: 500m
- name: HTTPD_MEM_REQ
  value: 512Mi
- name: HTTPD_MEM_LIMIT
  value: 8192Mi
