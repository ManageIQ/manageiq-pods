apiVersion: v1
kind: Template
objects:
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: kafka-data
    labels:
      app: "${APP_NAME}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${KAFKA_VOLUME_CAPACITY}"
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: zookeeper-data
    labels:
      app: "${APP_NAME}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${ZOOKEEPER_VOLUME_CAPACITY}"
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: "${APP_NAME}"
    name: kafka
  spec:
    ports:
    - name: kafka
      port: 9092
    selector:
      name: kafka
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: "${APP_NAME}"
    name: zookeeper
  spec:
    ports:
    - name: zookeeper
      port: 2181
    selector:
      name: zookeeper
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: kafka
    labels:
      app: "${APP_NAME}"
  spec:
    replicas: 1
    strategy:
      type: Recreate
    selector:
      matchLabels:
        name: kafka
    template:
      metadata:
        name: kafka
        labels:
          name: kafka
      spec:
        containers:
        - name: kafka
          image: docker.io/bitnami/kafka:latest
          env:
          - name: KAFKA_BROKER_USER
            valueFrom:
              secretKeyRef:
                name: kafka-secrets
                key: username
          - name: KAFKA_BROKER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: kafka-secrets
                key: password
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: zookeeper:2181
          - name: ALLOW_PLAINTEXT_LISTENER
            value: 'yes'
          ports:
          - containerPort: 9092
          volumeMounts:
          - name: kafka-data
            mountPath: "/bitnami/kafka"
        terminationGracePeriodSeconds: 10
        volumes:
        - name: kafka-data
          persistentVolumeClaim:
            claimName: kafka-data
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: zookeeper
    labels:
      app: "${APP_NAME}"
  spec:
    replicas: 1
    strategy:
      type: Recreate
    selector:
      matchLabels:
        name: zookeeper
    template:
      metadata:
        name: zookeeper
        labels:
          name: zookeeper
      spec:
        containers:
        - image: docker.io/bitnami/zookeeper:latest
          name: zookeeper
          env:
          - name: ALLOW_ANONYMOUS_LOGIN
            value: 'yes'
          ports:
          - containerPort: 2181
          volumeMounts:
          - mountPath: "/bitnami/zookeeper"
            name: zookeeper-data
        restartPolicy: Always
        volumes:
        - name: zookeeper-data
          persistentVolumeClaim:
            claimName: zookeeper-data
parameters:
- name: APP_NAME
  value: manageiq
- name: KAFKA_VOLUME_CAPACITY
  value: 1Gi
- name: ZOOKEEPER_VOLUME_CAPACITY
  value: 1Gi
