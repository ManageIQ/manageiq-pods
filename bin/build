#!/bin/bash

TAG=latest-spassky

RPM_BUILD_OPTIONS=${RPM_BUILD_OPTIONS:-""}
RPM_BUILD_IMAGE=${RPM_BUILD_IMAGE:-"manageiq/rpm_build:$TAG"}
RPM_PREFIX=${RPM_PREFIX:-"manageiq"}

while getopts "t:c:d:r:hbnops" opt; do
  case $opt in
    b) REBUILD_RPM="true" ;;
    c) CONTAINER_PREFIX=$OPTARG ;;
    d) BASE_DIR=$OPTARG ;;
    n) NO_CACHE="true" ;;
    o) NO_OPERATOR="true" ;;
    p) PUSH="true" ;;
    r) REPO=$OPTARG ;;
    s) RELEASE_BUILD="true" ;;
    t) TAG=$OPTARG ;;
    h) echo "Usage: $0 [-hbnops] [-c CONTAINER_PREFIX] [-d BASE_DIR] [-r IMAGE_REPOSITORY] [-t IMAGE_TAG]"; exit 1
  esac
done

BASE_DIR=${BASE_DIR:-$PWD}
CONTAINER_PREFIX=${CONTAINER_PREFIX:-manageiq}
IMAGE_DIR="$BASE_DIR/images"
OPERATOR_DIR="$BASE_DIR/manageiq-operator"
REPO=${REPO:-docker.io/manageiq}

CONTAINER_COMMAND="$(which podman &>/dev/null && echo "podman" || echo "docker")"

set -e

if [ -n "$REBUILD_RPM" ]; then
  rpm_dir=$IMAGE_DIR/manageiq-rpms/rpms
  rm -rf $rpm_dir/*
  options="-v $PWD/$rpm_dir:/root/BUILD/rpms"
  if [ -n "$RPM_BUILD_OPTIONS" ]; then
    options+=" -v $PWD/$RPM_BUILD_OPTIONS:/root/OPTIONS"
  fi

  $CONTAINER_COMMAND pull $RPM_BUILD_IMAGE
  cmd="$CONTAINER_COMMAND run -it --rm $options $RPM_BUILD_IMAGE build"
  echo "Building RPMs locally: $cmd"
  $cmd
fi

pushd $IMAGE_DIR
  # Pull the base image first
  $CONTAINER_COMMAND pull registry.access.redhat.com/ubi9/ubi

  build_images="manageiq-rpms manageiq-base manageiq-base-worker manageiq-orchestrator manageiq-webserver-worker manageiq-ui-worker"
  for image in $build_images; do
    cmd="$CONTAINER_COMMAND build --build-arg FROM_REPO=$REPO --build-arg FROM_TAG=$TAG --build-arg RPM_PREFIX=$RPM_PREFIX --tag $REPO/$image:$TAG"

    if [ -n "$VERBOSE" ]; then
      cmd+=" --progress plain"
    fi

    # --format docker is needed for podman to ensure the builds are built with docker v2 manifests
    if [ "$CONTAINER_COMMAND" == "podman" ]; then
      cmd+=" --format docker"
    fi

    if [ -n "$NO_CACHE" ]; then
      cmd+=" --no-cache"
    fi

    if [ -n "$RELEASE_BUILD" -a "$image" == "manageiq-base" ]; then
      cmd+=" --build-arg RELEASE_BUILD=true"
    fi

    cmd+=" $image"

    echo "Building $image: $cmd"
    $cmd
  done
popd

if [ -z "$NO_OPERATOR" ]; then
  pushd "$OPERATOR_DIR"
    cmd="IMG=$REPO/manageiq-operator:$TAG make docker-build"
    echo "Building manageiq-operator: $cmd"
    bash -c "$cmd"
  popd
fi

if [ -n "$PUSH" ]; then
  push_images="manageiq-base manageiq-base-worker manageiq-orchestrator manageiq-webserver-worker manageiq-ui-worker"
  if [ -z "$NO_OPERATOR" ]; then
    push_images="$push_images manageiq-operator"
  fi

  for image in $push_images; do
    cmd="$CONTAINER_COMMAND push $REPO/$image:$TAG"

    # --format docker is needed for podman to ensure the builds are built with docker v2 manifests
    if [ "$CONTAINER_COMMAND" == "podman" ]; then
      cmd+=" --format docker"
    fi

    echo "Pushing $image: $cmd"
    $cmd
  done
fi
