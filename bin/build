#!/bin/bash

TAG=latest-najdorf

BUILD_REF=${BUILD_REF:-najdorf}
BUILD_ORG=${BUILD_ORG:-ManageIQ}

ARCH=`uname -m`
CORE_REPO_NAME=${CORE_REPO_NAME:-manageiq}

GIT_HOST=${GIT_HOST:-github.com}
GIT_AUTH=${GIT_AUTH:-""}

RPM_BUILD_OPTIONS=${RPM_BUILD_OPTIONS:-""}
RPM_BUILD_IMAGE=${RPM_BUILD_IMAGE:-"manageiq/rpm_build:$TAG"}
RPM_PREFIX=${RPM_PREFIX:-"manageiq"}

while getopts "t:d:r:hblnops" opt; do
  case $opt in
    b) REBUILD_RPM="true" ;;
    d) BASE_DIR=$OPTARG ;;
    l) LOCAL_RPM="true" ;;
    n) NO_CACHE="true" ;;
    o) NO_OPERATOR="true" ;;
    p) PUSH="true" ;;
    r) REPO=$OPTARG ;;
    s) RELEASE_BUILD="true" ;;
    t) TAG=$OPTARG ;;
    h) echo "Usage: $0 -d BASE_DIR -r IMAGE_REPOSITORY [-hblnops] [ -t IMAGE_TAG ]"; exit 1
  esac
done

if [ -z "$BASE_DIR" ]; then
  echo "Required parameter for base directory (-d) is missing"
  exit 1
fi
IMAGE_DIR="$BASE_DIR/images"
OPERATOR_DIR="$BASE_DIR/manageiq-operator"

if [ -z "$REPO" ]; then
  echo "Required parameter for repository (-r) is missing"
  exit 1
fi

if [ -n "$LOCAL_RPM" ] && [ -n "$REBUILD_RPM" ]; then
  echo "Local rpm (-l) and rebuild rpm (-b) options can't be used together"
  exit 1
fi

set -e

if [ -n "$REBUILD_RPM" ]; then
  rpm_dir=$IMAGE_DIR/manageiq-base/rpms
  rm -rf $rpm_dir/*
  options="-v $PWD/$rpm_dir:/root/BUILD/rpms"
  if [ -n "$RPM_BUILD_OPTIONS" ]; then
    options+=" -v $PWD/$RPM_BUILD_OPTIONS:/root/OPTIONS"
  fi
  docker pull $RPM_BUILD_IMAGE
  cmd="docker run -it --rm $options $RPM_BUILD_IMAGE build"
  echo "Building RPMs locally: $cmd"
  $cmd
fi

pushd $IMAGE_DIR
  cmd="docker build --tag $REPO/manageiq-base:$TAG \
                    --pull \
                    --build-arg BUILD_REF=$BUILD_REF \
                    --build-arg BUILD_ORG=$BUILD_ORG \
                    --build-arg GIT_AUTH=$GIT_AUTH \
                    --build-arg GIT_HOST=$GIT_HOST \
                    --build-arg CORE_REPO_NAME=$CORE_REPO_NAME \
                    --build-arg ARCH=$ARCH \
                    --build-arg RPM_PREFIX=$RPM_PREFIX"

  if [ -n "$NO_CACHE" ]; then
    cmd+=" --no-cache"
  fi

  if [ -n "$LOCAL_RPM" ] || [ -n "$REBUILD_RPM" ]; then
    cmd+=" --build-arg LOCAL_RPM=true"
  fi

  if [ -n "$RELEASE_BUILD" ]; then
    cmd+=" --build-arg RELEASE_BUILD=true"
  fi

  if [ "$ARCH" = "s390x" ]; then
    # --format docker is needed to ensure the builds are built with docker v2 manifests
    cmd+=" --format docker"
  fi

  echo "Building manageiq-base: $cmd"
  $cmd manageiq-base

  build_images="manageiq-base-worker manageiq-orchestrator manageiq-webserver-worker manageiq-ui-worker"
  for image in $build_images; do
    cmd="docker build --tag $REPO/$image:$TAG \
                      --build-arg FROM_REPO=$REPO \
                      --build-arg FROM_TAG=$TAG \
                      --build-arg RPM_PREFIX=$RPM_PREFIX \
                      $image"

    if [ "$ARCH" = "s390x" ]; then
      # --format docker is needed to ensure the builds are built with docker v2 manifests
      cmd+=" --format docker"
    fi

    echo "Building $image: $cmd"
    $cmd
  done
popd

if [ -z "$NO_OPERATOR" ]; then
  pushd "$OPERATOR_DIR"
    echo "Building manageiq-operator manifest..."
    mkdir -p ./build/_output
    echo "$(date +"%Y%m%d%H%M%S")-$(git rev-parse HEAD)" > ./build/_output/BUILD
    cat ./build/_output/BUILD
    echo

    image_build_args="--image-build-args --pull"
    image_builder=""

    if [ "$ARCH" = "s390x" ]; then
      # HACK: Using buildah as, under the covers, this uses --format docker,
      # which is needed to build v2 manifest builds. Normally, we'd pass
      # --format docker as above as another arg to image-build-args, however,
      # there is a bug in operator-sdk v0.18.2 where it cannot accept multiple
      # args in image-build-args.
      #
      # See also https://github.com/operator-framework/operator-sdk/blob/v0.18.2/cmd/operator-sdk/build/cmd.go#L75-L99
      image_builder="--image-builder buildah"
    fi

    cmd="operator-sdk build $REPO/manageiq-operator:$TAG $image_build_args $image_builder"
    echo "Building manageiq-operator: $cmd"
    $cmd
  popd
fi

if [ -n "$PUSH" ]; then
  push_images="manageiq-base manageiq-base-worker manageiq-orchestrator manageiq-webserver-worker manageiq-ui-worker"
  if [ -z "$NO_OPERATOR" ]; then
    push_images="$push_images manageiq-operator"
  fi

  for image in $push_images; do
    cmd="docker push $REPO/$image:$TAG"
    echo "Pushing: $cmd"
    $cmd
  done
fi
