#!/bin/bash

param_file=$1
[ -z "$param_file" ] && echo -e "Error: Missing argument. Usage:\n  $0 <parameters-file>" && exit 1

function apply_template() {
  local template=$1
  oc process --local -f templates/app/$template --param-file=$param_file --ignore-unknown-parameters | oc apply -f -
}

function secret_missing() {
  oc get secrets -o=name | grep -q "$1"
  [ $? -ne 0 ]
}

function parameter_provided() {
  grep -q "^$1=\S" $param_file
}

function create_tls_secret() {
  openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN=server"
  oc create secret tls tls-secret --cert=tls.crt --key=tls.key
  rm tls.crt tls.key
}

# For us to safely create the secret we need to have either provided a password
# or not have created the secret yet. This ensures we don't overwrite the existing
# password with a newly generated one.
(parameter_provided "DATABASE_PASSWORD" || secret_missing "postgresql-secrets") && apply_template "postgresql-secrets.yaml"
(parameter_provided "ENCRYPTION_KEY" || secret_missing "app-secrets") && apply_template "app-secrets.yaml"
(parameter_provided "MESSAGING_PASSWORD" || secret_missing "kafka-secrets") && apply_template "kafka-secrets.yaml"
secret_missing "tls-secret" && create_tls_secret

# Orchestrator RBAC
apply_template "rbac.yaml"

# Only deploy the database if the user didn't specify an external database host
parameter_provided "DATABASE_HOSTNAME" || apply_template "postgresql.yaml"
parameter_provided "MESSAGING_HOSTNAME" || apply_template "kafka.yaml"

apply_template "httpd.yaml"
apply_template "memcached.yaml"
apply_template "orchestrator.yaml"
